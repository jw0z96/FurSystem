#ifndef RANDOMCOMPUTESHADERDISTRIBUTORMODEL_H
#define RANDOMCOMPUTESHADERDISTRIBUTORMODEL_H

#include "RandomDistributorModel.h"

class RandomComputeShaderDistributorModel : public RandomDistributorModel
{
	Q_OBJECT

	public:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief constructor
		//----------------------------------------------------------------------------------------------------------------------
		RandomComputeShaderDistributorModel();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief destructor
		//----------------------------------------------------------------------------------------------------------------------
		~RandomComputeShaderDistributorModel();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief overrides for NodeDataModel
		//----------------------------------------------------------------------------------------------------------------------
		QString caption() const override {return QString("Disribute random curves on Mesh");};
		//----------------------------------------------------------------------------------------------------------------------
		QString name() const override {return QString("Random Distributor (Compute Shader)");};
		//----------------------------------------------------------------------------------------------------------------------
		std::unique_ptr<NodeDataModel> clone() const override {return std::make_unique<RandomComputeShaderDistributorModel>();};
		//----------------------------------------------------------------------------------------------------------------------
		virtual QString modelName() const {return QString("Distributed Curves");};
		//----------------------------------------------------------------------------------------------------------------------
		QWidget* embeddedWidget() override {return m_spinbox;};
		//----------------------------------------------------------------------------------------------------------------------

	private:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief recalculate the mesh area
		//----------------------------------------------------------------------------------------------------------------------
		void meshChanged() override;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief distribute curves on the mesh
		//----------------------------------------------------------------------------------------------------------------------
		void distribute() override;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief SSBO ID
		//----------------------------------------------------------------------------------------------------------------------
		unsigned int m_MeshSSBOID;
};

#endif // RANDOMCOMPUTESHADERDISTRIBUTORMODEL_H
