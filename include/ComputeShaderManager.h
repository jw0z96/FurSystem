#ifndef COMPUTESHADERMANAGER_H
#define COMPUTESHADERMANAGER_H

#include "Mesh.h"
#include "Shader.h"

#include <GL/glew.h>

class ComputeShaderManager
{
	private:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief private dummy constructor for the singleton
		//----------------------------------------------------------------------------------------------------------------------
		ComputeShaderManager();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief our singleton instance
		//----------------------------------------------------------------------------------------------------------------------
		static ComputeShaderManager* m_instance;

	public:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief get the singleton instance
		//----------------------------------------------------------------------------------------------------------------------
		static ComputeShaderManager* getInstance() {if (!m_instance){m_instance = new ComputeShaderManager();} return m_instance;}
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief dtor
		//----------------------------------------------------------------------------------------------------------------------
		~ComputeShaderManager();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief delete all shaders
		//----------------------------------------------------------------------------------------------------------------------
		void cleanUpAll();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief create an SSBO for a mesh
		//----------------------------------------------------------------------------------------------------------------------
		void createCurvesSSBO(unsigned int &buffer, unsigned int _count);
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief create an SSBO for a mesh
		//----------------------------------------------------------------------------------------------------------------------
		void createMeshSSBO(unsigned int &buffer, Mesh &mesh);
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief copy Curves SSBO
		//----------------------------------------------------------------------------------------------------------------------
		void copyCurvesSSBO(unsigned int src, unsigned int &dst);

		//----------------------------------------------------------------------------------------------------------------------
		/// @brief copy Curves SSBO
		//----------------------------------------------------------------------------------------------------------------------
		void randomDistribution(unsigned int &meshSSBO, unsigned int &curvesSSBO, unsigned int curveCount, unsigned int faceCount, float meshArea);

	private:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief our compute shaders
		//----------------------------------------------------------------------------------------------------------------------
		Shader randomDistributionShader;
};

#endif // COMPUTESHADERMANAGER_H
