#ifndef MESHRENDERABLE_H
#define MESHRENDERABLE_H

#include <GL/glew.h>

#include "Renderable.h"
#include "Mesh.h"

class MeshRenderable : public Renderable
{
	public:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief constructor
		//----------------------------------------------------------------------------------------------------------------------
		MeshRenderable();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief destructor
		//----------------------------------------------------------------------------------------------------------------------
		~MeshRenderable();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief draw this renderable
		//----------------------------------------------------------------------------------------------------------------------
		void draw() override;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief get the type of this renderable
		//----------------------------------------------------------------------------------------------------------------------
		RenderableType getType() const override {return MESH;}
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief generate the VAO for the renderable
		//----------------------------------------------------------------------------------------------------------------------
		void generate() override;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief delete the VAO for the renderable
		//----------------------------------------------------------------------------------------------------------------------
		void cleanUp() override;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief set the mesh
		//----------------------------------------------------------------------------------------------------------------------
		void setMesh(Mesh const &_mesh);
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief set the colour of this renderable
		//----------------------------------------------------------------------------------------------------------------------
		void setColour(glm::vec3 const &_col);
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief get the colour of this renderable
		//----------------------------------------------------------------------------------------------------------------------
		glm::vec3 getColour() const {return m_colour;}
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief set the Roughness of this renderable
		//----------------------------------------------------------------------------------------------------------------------
		void setRoughness(float const &_roughness);
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief get the Roughness of this renderable
		//----------------------------------------------------------------------------------------------------------------------
		float getRoughness() const {return m_roughness;}
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief set the Metallic of this renderable
		//----------------------------------------------------------------------------------------------------------------------
		void setMetallic(float const &_metallic);
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief get the Metallic of this renderable
		//----------------------------------------------------------------------------------------------------------------------
		float getMetallic() const {return m_metallic;}


	private:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief m_mesh The Mesh object
		//----------------------------------------------------------------------------------------------------------------------
		Mesh m_mesh;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief m_VAO The VAO and VBO ids
		//----------------------------------------------------------------------------------------------------------------------
		GLuint m_VAO, m_VBO;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief m_indices the number of indices to render
		//----------------------------------------------------------------------------------------------------------------------
		unsigned int m_indices;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief m_colour the colour of our renderable
		//----------------------------------------------------------------------------------------------------------------------
		glm::vec3 m_colour;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief m_roughness, m_metallic roughness and metallic
		//----------------------------------------------------------------------------------------------------------------------
		float m_roughness, m_metallic;
};

#endif // MESHRENDERABLE_H
