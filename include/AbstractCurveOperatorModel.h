#ifndef ABSTRACTCURVEOPERATORMODEL_H
#define ABSTRACTCURVEOPERATORMODEL_H

#include "Curves.h"

#include <iostream>

#include <QtCore/QObject>

#include "nodeeditor/NodeDataModel.hpp"

using QtNodes::PortType;
using QtNodes::PortIndex;
using QtNodes::NodeData;
using QtNodes::NodeDataType;
using QtNodes::NodeDataModel;

class AbstractCurveOperatorModel : public NodeDataModel
{
	Q_OBJECT

	public:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief constructor
		//----------------------------------------------------------------------------------------------------------------------
		AbstractCurveOperatorModel();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief destructor
		//----------------------------------------------------------------------------------------------------------------------
		virtual ~AbstractCurveOperatorModel();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief overrides for NodeDataModel
		//----------------------------------------------------------------------------------------------------------------------
		unsigned int nPorts(PortType portType) const override;
		//----------------------------------------------------------------------------------------------------------------------
		NodeDataType dataType(PortType portType, PortIndex portIndex) const override;
		//----------------------------------------------------------------------------------------------------------------------
		std::shared_ptr<NodeData> outData(PortIndex port) override;
		//----------------------------------------------------------------------------------------------------------------------
		void setInData(std::shared_ptr<NodeData> nodeData, PortIndex port) override;
		//----------------------------------------------------------------------------------------------------------------------
		QWidget* embeddedWidget() override {return nullptr;};
		//----------------------------------------------------------------------------------------------------------------------
		bool resizable() const override {return false;};
		//----------------------------------------------------------------------------------------------------------------------

	public slots:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief manipulate curves
		//----------------------------------------------------------------------------------------------------------------------
		virtual void operateCurves();

	protected:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief event filter gets whether we clicked in the node
		//----------------------------------------------------------------------------------------------------------------------
		bool eventFilter(QObject *object, QEvent *event) override;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief reset curves to input state
		//----------------------------------------------------------------------------------------------------------------------
		void resetCurves();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief curves object
		//----------------------------------------------------------------------------------------------------------------------
		Curves m_curves;

	private:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief node data
		//----------------------------------------------------------------------------------------------------------------------
		std::shared_ptr<NodeData> _nodeData;
};

#endif // ABSTRACTCURVEOPERATORMODEL_H
