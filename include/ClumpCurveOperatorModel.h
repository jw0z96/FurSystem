#ifndef CLUMPCURVEOPERATORMODEL_H
#define CLUMPCURVEOPERATORMODEL_H

#include "AbstractCurveOperatorModel.h"

#include <QtWidgets/QDoubleSpinBox>

class ClumpCurveOperatorModel : public AbstractCurveOperatorModel
{
	Q_OBJECT

	public:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief constructor
		//----------------------------------------------------------------------------------------------------------------------
		ClumpCurveOperatorModel();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief destructor
		//----------------------------------------------------------------------------------------------------------------------
		~ClumpCurveOperatorModel();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief overrides for NodeDataModel
		//----------------------------------------------------------------------------------------------------------------------
		QString caption() const override {return QString("Clump Curves");};
		//----------------------------------------------------------------------------------------------------------------------
		QString name() const override {return QString("Clump Curves");};
		//----------------------------------------------------------------------------------------------------------------------
		std::unique_ptr<NodeDataModel> clone() const override {return std::make_unique<ClumpCurveOperatorModel>();};
		//----------------------------------------------------------------------------------------------------------------------
		virtual QString modelName() const {return QString("Clump Operated Curves");};
		//----------------------------------------------------------------------------------------------------------------------
		QWidget* embeddedWidget() const {return nullptr;};
		//----------------------------------------------------------------------------------------------------------------------
		unsigned int nPorts(PortType portType) const override;
		//----------------------------------------------------------------------------------------------------------------------
		void setInData(std::shared_ptr<NodeData> nodeData, PortIndex portIndex) override;
		//----------------------------------------------------------------------------------------------------------------------
		NodeDataType dataType(PortType portType, PortIndex portIndex) const override;
		//----------------------------------------------------------------------------------------------------------------------
		virtual bool portCaptionVisible(PortType, PortIndex) const override {return true;};
		//----------------------------------------------------------------------------------------------------------------------
		virtual QString portCaption(PortType portType, PortIndex portIndex) const override;
		//----------------------------------------------------------------------------------------------------------------------

	private:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief reset curves to input state
		//----------------------------------------------------------------------------------------------------------------------
		void resetCurves();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief manipulate curves
		//----------------------------------------------------------------------------------------------------------------------
		void operateCurves() override;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief spinbox to control intensity (temporary)
		//----------------------------------------------------------------------------------------------------------------------
		// QDoubleSpinBox* m_spinbox;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief curves SSBO object
		//----------------------------------------------------------------------------------------------------------------------
		unsigned int m_clumpCurvesSSBO;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief curves object
		//----------------------------------------------------------------------------------------------------------------------
		Curves m_clumpCurves;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief node data
		//----------------------------------------------------------------------------------------------------------------------
		std::shared_ptr<CurvesData> m_clumpNodeData;
};

#endif // CLUMPCURVEOPERATORMODEL_H
