#ifndef RENDERABLEMANAGER_H
#define RENDERABLEMANAGER_H

#include <GL/glew.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>

#include <vector>
#include <memory>

#include "Viewport.h"
#include "Renderable.h"
#include "Shader.h"

class RenderableManager
{
	private:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief private dummy constructor for the singleton
		//----------------------------------------------------------------------------------------------------------------------
		RenderableManager();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief our singleton instance
		//----------------------------------------------------------------------------------------------------------------------
		static RenderableManager* m_instance;

	public:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief get the singleton instance
		//----------------------------------------------------------------------------------------------------------------------
		static RenderableManager* getInstance() {if (!m_instance){m_instance = new RenderableManager();} return m_instance;}
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief dtor
		//----------------------------------------------------------------------------------------------------------------------
		~RenderableManager();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief register a viewport
		//----------------------------------------------------------------------------------------------------------------------
		void registerViewport(Viewport* _viewport) {m_viewport = _viewport;}
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief register a new renderable
		//----------------------------------------------------------------------------------------------------------------------
		void registerRenderable(std::shared_ptr<Renderable> _renderable);
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief register a new renderable
		//----------------------------------------------------------------------------------------------------------------------
		void deregisterRenderable(std::shared_ptr<Renderable> _renderable);
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief delete the VAOs if they are marked for deletion
		//----------------------------------------------------------------------------------------------------------------------
		void cleanupRenderables();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief construct the VAOs if they are not already constructed
		//----------------------------------------------------------------------------------------------------------------------
		void constructRenderables();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief draw our registered renderables
		//----------------------------------------------------------------------------------------------------------------------
		void drawRenderables();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief set our matrices that get sent to the shader
		//----------------------------------------------------------------------------------------------------------------------
		void setMatrices(glm::mat4 _M, glm::mat4 _MV, glm::mat4 _MVP, glm::mat3 _normal, glm::vec3 _camPos);
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief update the viewport
		//----------------------------------------------------------------------------------------------------------------------
		void updateViewport() {m_viewport->update();}

	private:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief our shaders
		//----------------------------------------------------------------------------------------------------------------------
		Shader meshShader;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief a pointer to our viewport
		//----------------------------------------------------------------------------------------------------------------------
		Viewport *m_viewport;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief the Renderables
		//----------------------------------------------------------------------------------------------------------------------
		std::vector<std::shared_ptr<Renderable>> m_renderables;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief the matrices that get sent to the shader
		//----------------------------------------------------------------------------------------------------------------------
		glm::mat4 M, MV, MVP;
		glm::mat3 normalMatrix;
		glm::vec3 camPos;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief send the matrices to the shader
		//----------------------------------------------------------------------------------------------------------------------
		void loadMatricesToShader(GLuint _pid);
};

#endif // RENDERABLEMANAGER_H
